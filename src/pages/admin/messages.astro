---
import AdminLayout from '../../layouts/AdminLayout.astro';
---

<AdminLayout title="Message Management">
  <div class="mb-6">
    <p class="text-gray-700">
      View and manage messages from the contact form. Respond to inquiries from visitors.
    </p>
  </div>
  
  <div id="messages-admin" class="p-6 bg-white rounded-lg shadow border border-gray-200">
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
      <h2 class="text-xl font-semibold">Messages</h2>
      
      <div class="flex flex-col sm:flex-row gap-3">
        <div>
          <label for="search-input" class="block text-xs text-gray-600 mb-1">Search</label>
          <input 
            type="text" 
            id="search-input" 
            class="w-full sm:w-auto border rounded-md px-3 py-1.5 text-sm"
            placeholder="Search messages..."
          >
        </div>
        <div>
          <label for="status-filter" class="block text-xs text-gray-600 mb-1">Filter by Status</label>
          <select id="status-filter" class="w-full sm:w-auto border rounded-md px-3 py-1.5 text-sm">
            <option value="all">All Statuses</option>
            <option value="new">New</option>
            <option value="read">Read</option>
            <option value="replied">Replied</option>
            <option value="archived">Archived</option>
          </select>
        </div>
      </div>
    </div>
    
    <div id="messages-loading" class="text-center py-4">
      <p>Loading messages...</p>
    </div>
    
    <div id="messages-error" class="hidden bg-red-100 text-red-800 p-3 rounded mb-4">
      Could not load messages. Please check your Firebase configuration.
    </div>
    
    <div id="messages-table" class="hidden overflow-x-auto">
      <table class="min-w-full bg-white">
        <thead class="bg-gray-100 border-b">
          <tr>
            <th class="text-left p-3 w-32">Date</th>
            <th class="text-left p-3 w-36">Name</th>
            <th class="text-left p-3 w-36">Contact</th>
            <th class="text-left p-3">Message</th>
            <th class="text-center p-3 w-24">Status</th>
            <th class="text-right p-3 w-24">Actions</th>
          </tr>
        </thead>
        <tbody id="messages-tbody">
          <!-- Messages will be populated here -->
        </tbody>
      </table>
    </div>
    
    <div id="no-messages" class="hidden text-center py-8">
      <p class="text-gray-500">No messages found matching the current filters.</p>
    </div>
    
    <!-- Pagination -->
    <div id="pagination" class="hidden mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
      <div class="text-sm text-gray-600">
        Showing <span id="current-range">0-0</span> of <span id="total-count">0</span> messages
      </div>
      <div class="flex items-center gap-2">
        <button id="prev-page" class="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed">
          Previous
        </button>
        <span id="page-indicator" class="text-sm">Page <span id="current-page">1</span></span>
        <button id="next-page" class="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed">
          Next
        </button>
      </div>
    </div>
  </div>
  
  <!-- Message Detail Modal -->
  <div id="message-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-3xl max-h-[90vh] overflow-y-auto">
      <div class="flex justify-between items-center mb-4">
        <h3 id="modal-title" class="text-xl font-semibold">Message Details</h3>
        <button id="close-modal-btn" class="text-gray-500 hover:text-gray-700">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <div id="message-details" class="space-y-4">
        <!-- Message details will be populated here -->
      </div>
      
      <div class="mt-6 border-t pt-4">
        <h4 class="font-medium mb-2">Update Status</h4>
        <div class="flex items-center space-x-2">
          <select id="status-select" class="border rounded-md px-3 py-1.5">
            <option value="new">New</option>
            <option value="read">Read</option>
            <option value="replied">Replied</option>
            <option value="archived">Archived</option>
          </select>
          <button id="update-status-btn" class="px-4 py-1.5 bg-blue-500 text-white rounded hover:bg-blue-600">
            Update Status
          </button>
        </div>
      </div>
      
      <div class="mt-4 flex justify-between">
        <button id="delete-message-btn" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">
          Delete Message
        </button>
        <button id="close-btn" class="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400">
          Close
        </button>
      </div>
      
      <div id="modal-error" class="mt-4 hidden bg-red-100 text-red-800 p-3 rounded"></div>
    </div>
  </div>
</AdminLayout>

<script>
  import { 
    getFirestore, 
    collection, 
    getDocs, 
    doc, 
    deleteDoc, 
    updateDoc,
    query,
    where,
    orderBy
  } from 'firebase/firestore';
  import { db } from '../../lib/firebase';
  
  // Only execute this script if the messages admin component is present on the page
  if (document.getElementById('messages-admin')) {
    // Elements
    const messagesLoading = document.getElementById('messages-loading');
    const messagesError = document.getElementById('messages-error');
    const messagesTable = document.getElementById('messages-table');
    const messagesTbody = document.getElementById('messages-tbody');
    const noMessages = document.getElementById('no-messages');
    const statusFilter = document.getElementById('status-filter');
    const searchInput = document.getElementById('search-input');
    
    // Pagination elements
    const pagination = document.getElementById('pagination');
    const prevPageBtn = document.getElementById('prev-page');
    const nextPageBtn = document.getElementById('next-page');
    const currentPageSpan = document.getElementById('current-page');
    const currentRangeSpan = document.getElementById('current-range');
    const totalCountSpan = document.getElementById('total-count');
    
    // Modal elements
    const messageModal = document.getElementById('message-modal');
    const modalTitle = document.getElementById('modal-title');
    const messageDetails = document.getElementById('message-details');
    const statusSelect = document.getElementById('status-select');
    const updateStatusBtn = document.getElementById('update-status-btn');
    const deleteMessageBtn = document.getElementById('delete-message-btn');
    const closeModalBtn = document.getElementById('close-modal-btn');
    const closeBtn = document.getElementById('close-btn');
    const modalError = document.getElementById('modal-error');
    
    // Current active message ID
    let currentMessageId = null;
    let allMessages = [];
    let filteredMessages = [];
    
    // Pagination state
    const itemsPerPage = 10;
    let currentPage = 1;
    
    // Function to show error in modal
    const showModalError = (message) => {
      modalError.textContent = message;
      modalError.classList.remove('hidden');
    };
    
    // Function to hide modal error
    const hideModalError = () => {
      modalError.textContent = '';
      modalError.classList.add('hidden');
    };
    
    // Function to format date from timestamp
    const formatDate = (timestamp) => {
      if (!timestamp) return 'N/A';
      
      try {
        // Handle different timestamp formats
        if (timestamp._seconds !== undefined) {
          // Firestore timestamp object
          return new Date(timestamp._seconds * 1000).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          });
        } else if (timestamp.toDate instanceof Function) {
          // Firestore Timestamp class with toDate method
          return timestamp.toDate().toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          });
        } else if (timestamp instanceof Date) {
          // JavaScript Date object
          return timestamp.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          });
        } else if (typeof timestamp === 'string') {
          // ISO string or other date string
          return new Date(timestamp).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          });
        } else if (typeof timestamp === 'number') {
          // Unix timestamp in milliseconds
          return new Date(timestamp).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          });
        } else if (timestamp.seconds !== undefined) {
          // Firestore Timestamp in a different format
          return new Date(timestamp.seconds * 1000).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          });
        }
      } catch (error) {
        console.error('Error formatting date:', error, 'for timestamp:', timestamp);
        return 'Invalid date';
      }
      
      console.log('Unknown date format:', timestamp);
      return 'Unknown date format';
    };
    
    // Function to get the date value, checking both createdAt and created fields
    const getMessageDate = (message) => {
      // Debug the available date fields
      if (message && message.id && !message.createdAt && !message.created) {
        console.log(`Message ${message.id} is missing date fields:`, message);
      }
      return message.createdAt || message.created || null;
    };
    
    // Function to get timestamp value for sorting
    const getTimestampValue = (timestamp) => {
      if (!timestamp) return 0;
      
      try {
        // Firestore Timestamp object with seconds & nanoseconds
        if (timestamp.seconds !== undefined) {
          return timestamp.seconds * 1000 + (timestamp.nanoseconds || 0) / 1000000;
        }
        
        // Firestore Timestamp with _seconds
        if (timestamp._seconds !== undefined) {
          return timestamp._seconds * 1000 + (timestamp._nanoseconds || 0) / 1000000;
        }
        
        // Regular Date object
        if (timestamp instanceof Date) {
          return timestamp.getTime();
        }
        
        // String date
        if (typeof timestamp === 'string') {
          return new Date(timestamp).getTime();
        }
        
        // Number (already a timestamp)
        if (typeof timestamp === 'number') {
          return timestamp;
        }
        
        // toDate method available (another Firestore format)
        if (timestamp.toDate instanceof Function) {
          return timestamp.toDate().getTime();
        }
      } catch (error) {
        console.error('Error getting timestamp value:', error);
        return 0;
      }
      
      return 0;
    };
    
    // Function to load messages from Firestore
    const loadMessages = async () => {
      try {
        messagesLoading.classList.remove('hidden');
        messagesTable.classList.add('hidden');
        noMessages.classList.add('hidden');
        messagesError.classList.add('hidden');
        pagination.classList.add('hidden');
        
        // Get all messages without ordering first
        const messagesCollection = collection(db, 'messages');
        const querySnapshot = await getDocs(messagesCollection);
        
        console.log(`Retrieved ${querySnapshot.size} messages from Firestore`);
        
        if (querySnapshot.empty) {
          messagesLoading.classList.add('hidden');
          noMessages.classList.remove('hidden');
          return;
        }
        
        // Process messages
        allMessages = querySnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));
        
        // Debug: Log first message data structure and date values
        if (allMessages.length > 0) {
          const firstMessage = allMessages[0];
          console.log('First message data structure:', firstMessage);
          console.log('Date fields:', {
            createdAt: firstMessage.createdAt, 
            created: firstMessage.created,
            timestamp: getTimestampValue(getMessageDate(firstMessage))
          });
        }
        
        // Sort manually after loading
        allMessages.sort((a, b) => {
          const timeA = getTimestampValue(getMessageDate(a));
          const timeB = getTimestampValue(getMessageDate(b));
          return timeB - timeA; // Descending order (newest first)
        });
        
        // Reset pagination
        currentPage = 1;
        
        // Filter and display messages
        filterMessages();
        
      } catch (error) {
        console.error('Error loading messages:', error);
        messagesLoading.classList.add('hidden');
        messagesError.classList.remove('hidden');
        messagesError.textContent = `Error loading messages: ${error.message}`;
      }
    };
    
    // Function to filter and display messages based on search and status filters
    const filterMessages = () => {
      const statusValue = statusFilter.value;
      const searchValue = searchInput.value.toLowerCase();
      
      console.log(`Filtering ${allMessages.length} messages by status: ${statusValue} and search: "${searchValue}"`);
      
      // Filter messages based on status and search text
      filteredMessages = allMessages.filter(message => {
        // Status filter
        if (statusValue !== 'all') {
          const messageStatus = message.status || 'new';
          if (messageStatus !== statusValue) return false;
        }
        
        // Search filter
        if (searchValue) {
          const nameMatch = message.name && message.name.toLowerCase().includes(searchValue);
          const emailMatch = message.email && message.email.toLowerCase().includes(searchValue);
          const phoneMatch = message.phone && message.phone.toLowerCase().includes(searchValue);
          const messageMatch = message.message && message.message.toLowerCase().includes(searchValue);
          
          return nameMatch || emailMatch || phoneMatch || messageMatch;
        }
        
        return true;
      });
      
      console.log(`Filtered to ${filteredMessages.length} messages after filtering`);
      
      // Display current page
      displayCurrentPage();
    };
    
    // Function to display current page of messages
    const displayCurrentPage = () => {
      // Calculate pagination values
      const totalItems = filteredMessages.length;
      const totalPages = Math.ceil(totalItems / itemsPerPage);
      
      // Ensure current page is valid
      if (currentPage < 1) currentPage = 1;
      if (currentPage > totalPages) currentPage = totalPages;
      
      // Calculate start and end indices
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = Math.min(startIndex + itemsPerPage, totalItems);
      
      // Update pagination UI
      currentPageSpan.textContent = currentPage;
      currentRangeSpan.textContent = totalItems > 0 ? `${startIndex + 1}-${endIndex}` : '0-0';
      totalCountSpan.textContent = totalItems;
      
      // Enable/disable pagination buttons
      prevPageBtn.disabled = currentPage <= 1;
      nextPageBtn.disabled = currentPage >= totalPages;
      
      // Clear the table body
      messagesTbody.innerHTML = '';
      
      // Check if no messages match the filter
      if (filteredMessages.length === 0) {
        messagesLoading.classList.add('hidden');
        messagesTable.classList.add('hidden');
        pagination.classList.add('hidden');
        noMessages.classList.remove('hidden');
        return;
      }
      
      // Get current page items
      const currentPageItems = filteredMessages.slice(startIndex, endIndex);
      
      // Add messages to table
      currentPageItems.forEach(message => {
        const row = document.createElement('tr');
        row.className = message.status === 'new' ? 'font-semibold bg-blue-50' : '';
        
        // Truncate message text if too long
        const messageText = message.message || '';
        const truncatedMessage = messageText.length > 100 
          ? messageText.substring(0, 100) + '...' 
          : messageText;
        
        row.innerHTML = `
          <td class="p-3 border-b">${formatDate(getMessageDate(message))}</td>
          <td class="p-3 border-b">${message.name || 'N/A'}</td>
          <td class="p-3 border-b">
            ${message.email || 'N/A'}<br>
            ${message.phone || 'N/A'}
          </td>
          <td class="p-3 border-b">${truncatedMessage}</td>
          <td class="p-3 border-b text-center">
            <span class="inline-block px-2 py-1 rounded text-xs font-medium ${getStatusClass(message.status)}">
              ${message.status || 'new'}
            </span>
          </td>
          <td class="p-3 border-b text-right">
            <button class="view-message-btn text-blue-600 hover:text-blue-800" data-id="${message.id}">
              View
            </button>
          </td>
        `;
        
        messagesTbody.appendChild(row);
      });
      
      // Add event listeners to view buttons
      document.querySelectorAll('.view-message-btn').forEach(button => {
        button.addEventListener('click', () => {
          const messageId = button.getAttribute('data-id');
          viewMessage(messageId);
        });
      });
      
      // Show the table and pagination, hide loading
      messagesLoading.classList.add('hidden');
      messagesTable.classList.remove('hidden');
      pagination.classList.remove('hidden');
      noMessages.classList.add('hidden');
    };
    
    // Function to get status class for styling
    const getStatusClass = (status) => {
      switch(status) {
        case 'new':
          return 'bg-blue-100 text-blue-800';
        case 'read':
          return 'bg-gray-100 text-gray-800';
        case 'replied':
          return 'bg-green-100 text-green-800';
        case 'archived':
          return 'bg-yellow-100 text-yellow-800';
        default:
          return 'bg-gray-100 text-gray-800';
      }
    };
    
    // Function to view message details
    const viewMessage = (messageId) => {
      const message = allMessages.find(m => m.id === messageId);
      if (!message) return;
      
      currentMessageId = messageId;
      
      // Update modal title
      modalTitle.textContent = `Message from ${message.name || 'Unknown'}`;
      
      // Update status select
      statusSelect.value = message.status || 'new';
      
      // Update message details
      messageDetails.innerHTML = `
        <div class="bg-gray-50 p-4 rounded">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <p class="text-sm text-gray-500">From</p>
              <p class="font-medium">${message.name || 'N/A'}</p>
            </div>
            <div>
              <p class="text-sm text-gray-500">Date</p>
              <p class="font-medium">${formatDate(getMessageDate(message))}</p>
            </div>
            <div>
              <p class="text-sm text-gray-500">Email</p>
              <p class="font-medium">
                <a href="mailto:${message.email}" class="text-blue-600 hover:underline">
                  ${message.email || 'N/A'}
                </a>
              </p>
            </div>
            <div>
              <p class="text-sm text-gray-500">Phone</p>
              <p class="font-medium">
                <a href="tel:${message.phone}" class="text-blue-600 hover:underline">
                  ${message.phone || 'N/A'}
                </a>
              </p>
            </div>
          </div>
          <div>
            <p class="text-sm text-gray-500">Message</p>
            <div class="mt-1 p-3 bg-white border rounded">
              ${message.message ? message.message.replace(/\n/g, '<br>') : 'No message content'}
            </div>
          </div>
        </div>
      `;
      
      // Show modal
      messageModal.classList.remove('hidden');
      
      // Update the message status to 'read' if it's 'new'
      if (message.status === 'new') {
        updateMessageStatus('read');
      }
    };
    
    // Function to update message status
    const updateMessageStatus = async (status = null) => {
      if (!currentMessageId) return;
      
      try {
        hideModalError();
        
        const statusToUpdate = status || statusSelect.value;
        const messageRef = doc(db, 'messages', currentMessageId);
        
        await updateDoc(messageRef, {
          status: statusToUpdate,
          updatedAt: new Date()
        });
        
        // Update message in local array
        const messageIndex = allMessages.findIndex(m => m.id === currentMessageId);
        if (messageIndex !== -1) {
          allMessages[messageIndex].status = statusToUpdate;
          allMessages[messageIndex].updatedAt = new Date();
        }
        
        // Refresh display
        filterMessages();
        
      } catch (error) {
        console.error('Error updating message status:', error);
        showModalError(`Error updating status: ${error.message}`);
      }
    };
    
    // Function to delete message
    const deleteMessage = async () => {
      if (!currentMessageId) return;
      
      if (!confirm('Are you sure you want to delete this message? This action cannot be undone.')) {
        return;
      }
      
      try {
        hideModalError();
        
        const messageRef = doc(db, 'messages', currentMessageId);
        await deleteDoc(messageRef);
        
        // Remove message from local array
        allMessages = allMessages.filter(m => m.id !== currentMessageId);
        
        // Close modal
        messageModal.classList.add('hidden');
        
        // Refresh display
        filterMessages();
        
      } catch (error) {
        console.error('Error deleting message:', error);
        showModalError(`Error deleting message: ${error.message}`);
      }
    };
    
    // Event handlers
    if (searchInput) {
      // Debounce search input to avoid too many refreshes
      let searchTimeout;
      searchInput.addEventListener('input', () => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          filterMessages();
        }, 300);
      });
    }
    
    if (statusFilter) {
      statusFilter.addEventListener('change', filterMessages);
    }
    
    if (prevPageBtn) {
      prevPageBtn.addEventListener('click', () => {
        if (currentPage > 1) {
          currentPage--;
          displayCurrentPage();
        }
      });
    }
    
    if (nextPageBtn) {
      nextPageBtn.addEventListener('click', () => {
        const totalPages = Math.ceil(filteredMessages.length / itemsPerPage);
        if (currentPage < totalPages) {
          currentPage++;
          displayCurrentPage();
        }
      });
    }
    
    if (updateStatusBtn) {
      updateStatusBtn.addEventListener('click', () => updateMessageStatus());
    }
    
    if (deleteMessageBtn) {
      deleteMessageBtn.addEventListener('click', deleteMessage);
    }
    
    if (closeModalBtn) {
      closeModalBtn.addEventListener('click', () => {
        messageModal.classList.add('hidden');
      });
    }
    
    if (closeBtn) {
      closeBtn.addEventListener('click', () => {
        messageModal.classList.add('hidden');
      });
    }
    
    // Close modal when clicking outside
    if (messageModal) {
      messageModal.addEventListener('click', (e) => {
        if (e.target === messageModal) {
          messageModal.classList.add('hidden');
        }
      });
    }
    
    // Initial load
    loadMessages();
  }
</script> 