---
import AdminLayout from '../../layouts/AdminLayout.astro';
---

<AdminLayout title="Signup Management">
  <div class="mb-6">
    <p class="text-gray-700">
      Manage student signups and registrations. View, update, and manage enrollment details.
    </p>
  </div>
  
  <div id="signups-admin" class="p-6 bg-white rounded-lg shadow border border-gray-200">
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
      <h2 class="text-xl font-semibold">Signups</h2>
      
      <div class="flex flex-col sm:flex-row gap-3">
        <div>
          <label for="search-input" class="block text-xs text-gray-600 mb-1">Search</label>
          <input 
            type="text" 
            id="search-input" 
            class="w-full sm:w-auto border rounded-md px-3 py-1.5 text-sm"
            placeholder="Search parents or children..."
          >
        </div>
        <div>
          <label for="session-filter" class="block text-xs text-gray-600 mb-1">Filter by Session</label>
          <select id="session-filter" class="w-full sm:w-auto border rounded-md px-3 py-1.5 text-sm">
            <option value="all">All Sessions</option>
            <!-- Session options will be populated dynamically -->
          </select>
        </div>
        
        <div>
          <label for="status-filter" class="block text-xs text-gray-600 mb-1">Filter by Status</label>
          <select id="status-filter" class="w-full sm:w-auto border rounded-md px-3 py-1.5 text-sm">
            <option value="all">All Statuses</option>
            <option value="lessons scheduled">Scheduled</option>
            <option value="completed">Completed</option>
            <option value="cancelled">Cancelled</option>
            <option value="pending">Pending</option>
          </select>
        </div>
      </div>
    </div>
    
    <div id="signups-loading" class="text-center py-4">
      <p>Loading signups...</p>
    </div>
    
    <div id="signups-error" class="hidden bg-red-100 text-red-800 p-3 rounded mb-4">
      Could not load signups. Please check your Firebase configuration.
    </div>
    
    <div id="signups-table" class="hidden overflow-x-auto">
      <table class="min-w-full bg-white">
        <thead class="bg-gray-100 border-b">
          <tr>
            <th class="text-left p-3 w-24">Signup Date</th>
            <th class="text-left p-3 w-48">Parent</th>
            <th class="text-left p-3">Contact</th>
            <th class="text-left p-3">Children</th>
            <th class="text-left p-3 w-32">Sessions</th>
            <th class="text-center p-3 w-24">Payment</th>
            <th class="text-center p-3 w-32">Status</th>
            <th class="text-right p-3 w-32">Actions</th>
          </tr>
        </thead>
        <tbody id="signups-tbody">
          <!-- Signups will be populated here -->
        </tbody>
      </table>
    </div>
    
    <div id="no-signups" class="hidden text-center py-8">
      <p class="text-gray-500">No signups found matching the current filters.</p>
    </div>
    
    <!-- Pagination -->
    <div id="pagination" class="hidden mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
      <div class="text-sm text-gray-600">
        Showing <span id="current-range">0-0</span> of <span id="total-count">0</span> signups
      </div>
      <div class="flex items-center gap-2">
        <button id="prev-page" class="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed">
          Previous
        </button>
        <span id="page-indicator" class="text-sm">Page <span id="current-page">1</span></span>
        <button id="next-page" class="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed">
          Next
        </button>
      </div>
    </div>
  </div>
  
  <!-- Signup Detail Modal -->
  <div id="signup-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
      <div class="flex justify-between items-center mb-4">
        <h3 id="modal-title" class="text-xl font-semibold">Signup Details</h3>
        <button id="close-modal-btn" class="text-gray-500 hover:text-gray-700">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <div id="signup-details">
        <!-- Signup details will be populated here -->
      </div>
      
      <div class="mt-6 border-t pt-4 space-y-4">
        <div>
          <h4 class="font-medium mb-2">Update Session Times</h4>
          <button id="save-times-btn" class="px-4 py-1.5 bg-green-500 text-white rounded hover:bg-green-600">
            Save Session Times
          </button>
        </div>
        
        <div>
          <h4 class="font-medium mb-2">Update Status</h4>
          <div class="flex items-center space-x-2">
            <select id="status-select" class="border rounded-md px-3 py-1.5">
              <option value="lessons scheduled">Lessons Scheduled</option>
              <option value="completed">Completed</option>
              <option value="cancelled">Cancelled</option>
              <option value="pending">Pending</option>
            </select>
            <button id="update-status-btn" class="px-4 py-1.5 bg-blue-500 text-white rounded hover:bg-blue-600">
              Update Status
            </button>
          </div>
        </div>
      </div>
      
      <div class="mt-4 flex justify-between">
        <button id="delete-signup-btn" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">
          Delete Signup
        </button>
        <button id="close-btn" class="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400">
          Close
        </button>
      </div>
      
      <div id="modal-error" class="mt-4 hidden bg-red-100 text-red-800 p-3 rounded"></div>
    </div>
  </div>
</AdminLayout>

<script>
  // Only execute this script if the signups admin component is present on the page
  if (document.getElementById('signups-admin')) {
    // Import the signups functions
    const signupsModule = import('../../lib/signups');
    const sessionsModule = import('../../lib/sessionManager');
    const firebaseModule = import('../../lib/firebase');
    
    // Debug the modules
    Promise.all([signupsModule, sessionsModule, firebaseModule]).then(([signups, sessions, firebase]) => {
      console.log('Available signups functions:', Object.keys(signups));
      console.log('Available sessions functions:', Object.keys(sessions));
      console.log('Available firebase exports:', Object.keys(firebase));
    }).catch(error => {
      console.error('Error loading modules:', error);
    });
    
    // Elements
    const signupsLoading = document.getElementById('signups-loading');
    const signupsError = document.getElementById('signups-error');
    const signupsTable = document.getElementById('signups-table');
    const signupsTbody = document.getElementById('signups-tbody');
    const noSignups = document.getElementById('no-signups');
    const sessionFilter = document.getElementById('session-filter');
    const statusFilter = document.getElementById('status-filter');
    const searchInput = document.getElementById('search-input');
    
    // Pagination elements
    const pagination = document.getElementById('pagination');
    const prevPageBtn = document.getElementById('prev-page');
    const nextPageBtn = document.getElementById('next-page');
    const currentPageSpan = document.getElementById('current-page');
    const currentRangeSpan = document.getElementById('current-range');
    const totalCountSpan = document.getElementById('total-count');
    
    // Modal elements
    const signupModal = document.getElementById('signup-modal');
    const modalTitle = document.getElementById('modal-title');
    const signupDetails = document.getElementById('signup-details');
    const statusSelect = document.getElementById('status-select');
    const updateStatusBtn = document.getElementById('update-status-btn');
    const saveTimesBtn = document.getElementById('save-times-btn');
    const deleteSignupBtn = document.getElementById('delete-signup-btn');
    const closeModalBtn = document.getElementById('close-modal-btn');
    const closeBtn = document.getElementById('close-btn');
    const modalError = document.getElementById('modal-error');
    
    // Current active signup ID
    let currentSignupId = null;
    let allSignups = [];
    let filteredSignups = [];
    let allSessions = [];
    
    // Pagination state
    const itemsPerPage = 10;
    let currentPage = 1;
    
    // Function to show error in modal
    const showModalError = (message) => {
      modalError.textContent = message;
      modalError.classList.remove('hidden');
    };
    
    // Function to hide modal error
    const hideModalError = () => {
      modalError.textContent = '';
      modalError.classList.add('hidden');
    };
    
    // Function to format date from timestamp
    const formatDate = (timestamp) => {
      if (!timestamp) return 'N/A';
      
      try {
        // Handle different timestamp formats
        if (timestamp._seconds !== undefined) {
          // Firestore timestamp object
          return new Date(timestamp._seconds * 1000).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          });
        } else if (timestamp.toDate instanceof Function) {
          // Firestore Timestamp class with toDate method
          return timestamp.toDate().toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          });
        } else if (timestamp instanceof Date) {
          // JavaScript Date object
          return timestamp.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          });
        } else if (typeof timestamp === 'string') {
          // ISO string or other date string
          return new Date(timestamp).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          });
        } else if (typeof timestamp === 'number') {
          // Unix timestamp in milliseconds
          return new Date(timestamp).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          });
        }
        
        return 'Invalid Date Format';
      } catch (error) {
        console.error('Error formatting date:', error, timestamp);
        return 'Invalid Date';
      }
    };
    
    // Function to calculate age from birthday
    const calculateAge = (birthday) => {
      if (!birthday) return 'N/A';
      
      try {
        const birthDate = new Date(birthday);
        const today = new Date();
        
        if (isNaN(birthDate.getTime())) {
          return 'Invalid Date';
        }
        
        let years = today.getFullYear() - birthDate.getFullYear();
        let months = today.getMonth() - birthDate.getMonth();
        
        // Adjust years and months if birth month is after current month
        // or if birth day is after current day in the same month
        if (months < 0 || (months === 0 && today.getDate() < birthDate.getDate())) {
          years--;
          months += 12;
        }
        
        // Handle case where birth day is after current day but in the same month
        if (today.getDate() < birthDate.getDate()) {
          months--;
          if (months < 0) {
            months += 12;
          }
        }
        
        // Format the output
        if (years === 0) {
          return `${months} month${months !== 1 ? 's' : ''}`;
        } else {
          return `${years} year${years !== 1 ? 's' : ''}, ${months} month${months !== 1 ? 's' : ''}`;
        }
      } catch (error) {
        console.error('Error calculating age:', error, birthday);
        return 'Invalid Date';
      }
    };
    
    // Function to view signup details
    const viewSignup = async (signupId) => {
      hideModalError();
      currentSignupId = signupId;
      
      try {
        const signup = allSignups.find(s => s.id === signupId);
        if (!signup) {
          showModalError('Signup not found');
          return;
        }
        
        // Set status select value
        statusSelect.value = signup.status || 'lessons scheduled';
        
        // Set modal title
        modalTitle.textContent = `Signup: ${signup.parent.name}`;
        
        // Format created date
        const createdDate = formatDate(signup.created || signup.createdAt);
        
        // Build signup details HTML
        let detailsHTML = `
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 class="font-medium mb-2">Parent Information</h4>
              <div class="border rounded p-3">
                <p><strong>Name:</strong> ${signup.parent.name}</p>
                <p><strong>Email:</strong> <a href="mailto:${signup.parent.email}" class="text-blue-600 hover:underline">${signup.parent.email}</a></p>
                <p><strong>Phone:</strong> <a href="tel:${signup.parent.phone}" class="text-blue-600 hover:underline">${signup.parent.phone}</a></p>
                <p><strong>Signup Date:</strong> ${createdDate}</p>
              </div>
            </div>
            
            <div>
              <h4 class="font-medium mb-2">Payment Information</h4>
              <div class="border rounded p-3">
                <p><strong>Amount:</strong> $${signup.paymentTotal ? signup.paymentTotal.toFixed(2) : '0.00'}</p>
                <p><strong>Status:</strong> <span class="px-2 py-0.5 rounded ${getStatusClass(signup.status)}">${signup.status || 'Unknown'}</span></p>
                <p><strong>Stripe Customer:</strong> ${signup.stripeCustomerId ? 
                  `<a href="https://dashboard.stripe.com/customers/${signup.stripeCustomerId}" target="_blank" class="text-blue-600 hover:underline">${signup.stripeCustomerId}</a>` : 
                  'Not available'}</p>
              </div>
            </div>
          </div>
          
          ${signup.request ? `
            <div class="mt-4">
              <h4 class="font-medium mb-2">Special Requests</h4>
              <div class="border rounded p-3 bg-gray-50">
                <p>${signup.request.replace(/\n/g, '<br>')}</p>
              </div>
            </div>
          ` : ''}
          
          <div class="mt-4">
            <h4 class="font-medium mb-2">Children</h4>
            <div class="border rounded">
              ${(signup.children || []).map((child, index) => `
                <div class="p-3 ${index !== 0 ? 'border-t' : ''}">
                  <div class="flex justify-between">
                    <p class="font-medium">${child.name}</p>
                    <p class="text-sm">Age: ${calculateAge(child.birthday) || 'N/A'}</p>
                  </div>
                  <p class="text-sm mb-2">Level: ${child.level || 'N/A'}</p>
                  
                  <div class="mt-2">
                    <p class="text-sm font-medium">Sessions:</p>
                    ${(child.sessions || []).map(session => `
                      <div class="ml-2 p-2 mb-1 bg-blue-50 rounded text-sm">
                        <div><strong>${session.text || `Session ${session.id}`}</strong></div>
                        <div class="flex items-center">
                          <span class="mr-2">Time:</span> 
                          <input 
                            type="text" 
                            class="session-time border rounded px-2 py-1 text-sm flex-grow" 
                            data-child-index="${index}" 
                            data-session-id="${String(session.id)}" 
                            value="${session.time || ''}" 
                            placeholder="Enter time (e.g. 4:00 PM)"
                            spellcheck="false"
                            autocomplete="off"
                          >
                        </div>
                      </div>
                    `).join('')}
                  </div>
                </div>
              `).join('')}
            </div>
          </div>
        `;
        
        signupDetails.innerHTML = detailsHTML;
        signupModal.classList.remove('hidden');
      } catch (error) {
        console.error('Error opening signup modal:', error);
        showModalError(error.message || 'Error loading signup details');
      }
    };
    
    // Function to close the modal
    const closeModal = () => {
      signupModal.classList.add('hidden');
      currentSignupId = null;
      hideModalError();
    };
    
    // Function to update session times - simplified direct approach
    const updateSessionTimes = async () => {
      if (!currentSignupId) {
        console.log('No currentSignupId available');
        return;
      }
      
      try {
        hideModalError();
        
        // Get the Firestore document directly
        const signups = await signupsModule;
        
        // Create an array to store all updates
        const timeUpdates = [];
        
        // Collect all time inputs
        const timeInputs = document.querySelectorAll('.session-time');
        console.log(`Found ${timeInputs.length} time input fields`);
        
        // Collect all input values first
        timeInputs.forEach(input => {
          const childIndex = parseInt(input.getAttribute('data-child-index'));
          const sessionId = parseInt(input.getAttribute('data-session-id'));
          const newTime = input.value.trim();
          
          timeUpdates.push({
            childIndex,
            sessionId,
            newTime
          });
          
          console.log(`Collected time: Child ${childIndex}, Session ${sessionId}, Time "${newTime}"`);
        });
        
        if (timeUpdates.length === 0) {
          console.log('No time inputs found');
          return;
        }
        
        // Get current data
        const currentSignup = await signups.getSignup(currentSignupId);
        if (!currentSignup || !currentSignup.children) {
          throw new Error('Could not find signup or signup has no children');
        }
        
        // Create a deep copy of the children array
        const updatedChildren = JSON.parse(JSON.stringify(currentSignup.children));
        
        // Log the original children structure
        console.log('Original children structure:', updatedChildren);
        
        // Apply all updates
        let updatesApplied = false;
        
        timeUpdates.forEach(update => {
          const { childIndex, sessionId, newTime } = update;
          
          // Find the child
          if (childIndex >= 0 && childIndex < updatedChildren.length) {
            const child = updatedChildren[childIndex];
            
            // Make sure sessions array exists
            if (!child.sessions) {
              console.log(`Child ${childIndex} has no sessions array`);
              return;
            }
            
            // Find the session
            const session = child.sessions.find(s => {
              // Handle both number and string comparisons
              return s.id === sessionId || s.id === String(sessionId) || String(s.id) === String(sessionId);
            });
            
            if (session) {
              // Update the time directly
              const oldTime = session.time || '';
              console.log(`Updating session ${sessionId} for child ${childIndex} from "${oldTime}" to "${newTime}"`);
              session.time = newTime;
              updatesApplied = true;
            } else {
              console.log(`Session ${sessionId} not found for child ${childIndex}`);
            }
          }
        });
        
        if (!updatesApplied) {
          console.log('No updates were applied to any session');
          alert('No changes to save');
          return;
        }
        
        // Log the updated children structure
        console.log('Updated children structure:', updatedChildren);
        
        // Update the database
        console.log('Sending update to database');
        await signups.updateSignup(currentSignupId, { children: updatedChildren });
        
        // Success message
        console.log('Update successful');
        alert('Session times updated successfully');
        
        // Update local data
        const localIndex = allSignups.findIndex(s => s.id === currentSignupId);
        if (localIndex !== -1) {
          allSignups[localIndex].children = updatedChildren;
          
          // Refresh the view
          viewSignup(currentSignupId);
        }
        
      } catch (error) {
        console.error('Error updating session times:', error);
        showModalError(`Error updating session times: ${error.message}`);
      }
    };
    
    // Direct Firebase update approach as fallback
    const directlyUpdateSessionTime = async (childIndex, sessionId, newTime) => {
      try {
        console.log(`Attempting direct update for child ${childIndex}, session ${sessionId}, time "${newTime}"`);
        
        // Get Firebase modules
        const firebase = await firebaseModule;
        const { db } = firebase;

        if (!db) {
          console.error('Firebase db not available');
          return false;
        }
        
        // Import necessary Firestore functions
        const { doc, getDoc, updateDoc } = await import('firebase/firestore');
        
        // Get the document reference
        const signupRef = doc(db, 'signups', currentSignupId);
        
        // Get current data
        const docSnap = await getDoc(signupRef);
        if (!docSnap.exists()) {
          console.error('Document does not exist');
          return false;
        }
        
        const data = docSnap.data();
        
        // Validate data structure
        if (!data.children || !Array.isArray(data.children) || 
            childIndex >= data.children.length || 
            !data.children[childIndex].sessions || 
            !Array.isArray(data.children[childIndex].sessions)) {
          console.error('Invalid document structure', data);
          return false;
        }
        
        // Find the session
        const sessions = data.children[childIndex].sessions;
        let sessionFound = false;
        let updatedSessions = [...sessions]; // create a copy
        
        // Update the specific session
        for (let i = 0; i < updatedSessions.length; i++) {
          const session = updatedSessions[i];
          if (String(session.id) === String(sessionId)) {
            console.log(`Found session at index ${i}:`, session);
            
            // Update the time
            updatedSessions[i] = {
              ...session,
              time: newTime
            };
            
            sessionFound = true;
            break;
          }
        }
        
        if (!sessionFound) {
          console.error(`Session ${sessionId} not found for child ${childIndex}`);
          return false;
        }
        
        // Create the update object with the entire sessions array
        const updateObject = {
          [`children.${childIndex}.sessions`]: updatedSessions
        };
        
        console.log('Update object:', updateObject);
        
        // Perform the update
        await updateDoc(signupRef, {
          [`children`]: data.children.map((child, idx) => {
            if (idx === childIndex) {
              return { ...child, sessions: updatedSessions };
            }
            return child;
          })
        });
        
        console.log(`Successfully updated session time`);
        return true;
      } catch (err) {
        console.error('Error in direct update:', err);
        return false;
      }
    };
    
    // Function to update signup status
    const updateSignupStatus = async () => {
      if (!currentSignupId) return;
      
      try {
        hideModalError();
        
        const signups = await signupsModule;
        const newStatus = statusSelect.value;
        
        // Check which function is available
        const updateFn = signups.updateSignupStatus || signups.updateStatus;
        
        if (!updateFn) {
          throw new Error('Update function not found in signups module');
        }
        
        await updateFn(currentSignupId, newStatus);
        
        // Update the signup in our local array
        const index = allSignups.findIndex(s => s.id === currentSignupId);
        if (index !== -1) {
          allSignups[index].status = newStatus;
        }
        
        // Close modal and reload the table
        closeModal();
        filterSignups();
      } catch (error) {
        console.error('Error updating status:', error);
        showModalError(`Error updating status: ${error.message}`);
      }
    };
    
    // Function to delete signup
    const deleteSignup = async () => {
      if (!currentSignupId) return;
      
      // Confirm deletion
      if (confirm('Are you sure you want to delete this signup? This cannot be undone.')) {
        try {
          hideModalError();
          
          const signups = await signupsModule;
          
          // Check which function is available
          const deleteFn = signups.deleteSignup || signups.removeSignup;
          
          if (!deleteFn) {
            throw new Error('Delete function not found in signups module');
          }
          
          await deleteFn(currentSignupId);
          
          // Remove from our local array
          allSignups = allSignups.filter(s => s.id !== currentSignupId);
          
          closeModal();
          filterSignups();
        } catch (error) {
          console.error('Error deleting signup:', error);
          showModalError(`Error deleting signup: ${error.message}`);
        }
      }
    };
    
    // Function to load sessions for filter
    const loadSessions = async () => {
      try {
        console.log('Loading sessions...');
        
        // Get sessions module
        const sessions = await sessionsModule;
        
        // Find the appropriate sessions function
        const getSessionsFn = sessions.getAllSessions || sessions.getSessions || sessions.fetchSessions;
        if (!getSessionsFn) {
          throw new Error('Session loading function not found in sessionManager module');
        }
        
        // Load sessions
        allSessions = await getSessionsFn();
        console.log(`Successfully loaded ${allSessions.length} sessions`);
        
        // Clear options
        sessionFilter.innerHTML = '<option value="all">All Sessions</option>';
        
        // Sort sessions by ID
        allSessions.sort((a, b) => parseInt(a.id) - parseInt(b.id));
        
        // Add session options
        allSessions.forEach(session => {
          const option = document.createElement('option');
          option.value = session.id;
          option.textContent = `Session ${session.id}: ${session.dates}`;
          sessionFilter.appendChild(option);
        });
      } catch (error) {
        console.error('Error loading sessions:', error);
        signupsError.textContent = `Error loading sessions: ${error.message}`;
        signupsError.classList.remove('hidden');
      }
    };
    
    // Function to load signups from Firestore
    const loadSignups = async () => {
      try {
        // Show loading state
        signupsLoading.classList.remove('hidden');
        signupsTable.classList.add('hidden');
        noSignups.classList.add('hidden');
        signupsError.classList.add('hidden');
        pagination.classList.add('hidden');
        
        console.log('Loading signups and sessions...');
        
        // Import and destructure modules
        const signups = await signupsModule;
        const sessions = await sessionsModule;
        
        console.log('Loaded modules:', {
          signupFunctions: Object.keys(signups),
          sessionFunctions: Object.keys(sessions)
        });
        
        // Find the appropriate sessions function
        const getSessionsFn = sessions.getAllSessions || sessions.getSessions || sessions.fetchSessions;
        if (!getSessionsFn) {
          throw new Error('Session loading function not found in sessionManager module');
        }
        
        // Load sessions
        allSessions = await getSessionsFn();
        console.log(`Successfully loaded ${allSessions.length} sessions`);
        populateSessionFilter();
        
        // Find the appropriate signups function
        const getSignupsFn = signups.getAllSignups || signups.getSignups || signups.fetchSignups;
        if (!getSignupsFn) {
          throw new Error('Signup loading function not found in signups module');
        }
        
        // Load signups
        allSignups = await getSignupsFn();
        console.log(`Successfully loaded ${allSignups.length} signups`);
        
        if (allSignups.length === 0) {
          signupsLoading.classList.add('hidden');
          noSignups.classList.remove('hidden');
          return;
        }
        
        // Sort signups by date (newest first)
        allSignups.sort((a, b) => {
          const dateA = a.created || a.createdAt || new Date(0);
          const dateB = b.created || b.createdAt || new Date(0);
          
          // Handle different timestamp formats
          const timeA = dateA instanceof Date ? dateA.getTime() : 
                       dateA.toDate ? dateA.toDate().getTime() : 
                       dateA.seconds ? dateA.seconds * 1000 : 0;
          
          const timeB = dateB instanceof Date ? dateB.getTime() : 
                       dateB.toDate ? dateB.toDate().getTime() : 
                       dateB.seconds ? dateB.seconds * 1000 : 0;
          
          return timeB - timeA;
        });
        
        // Reset pagination
        currentPage = 1;
        
        // Filter and display signups
        filterSignups();
        
      } catch (error) {
        console.error('Error loading signups:', error);
        signupsLoading.classList.add('hidden');
        signupsError.classList.remove('hidden');
        signupsError.textContent = `Error loading signups: ${error.message}`;
      }
    };
    
    // Function to populate session filter dropdown
    const populateSessionFilter = () => {
      // Clear existing options except the first one
      while (sessionFilter.options.length > 1) {
        sessionFilter.remove(1);
      }
      
      // Add session options
      allSessions.forEach(session => {
        const option = document.createElement('option');
        option.value = session.id;
        option.textContent = `Session ${session.id}: ${session.dates}`;
        sessionFilter.appendChild(option);
      });
    };
    
    // Function to filter and display signups based on search and filters
    const filterSignups = () => {
      const statusValue = statusFilter.value;
      const sessionValue = sessionFilter.value;
      const searchValue = searchInput.value.toLowerCase();
      
      console.log(`Filtering by session: ${sessionValue}, status: ${statusValue}, search: "${searchValue}"`);
      
      // Filter signups based on status, session, and search text
      filteredSignups = allSignups.filter(signup => {
        // Status filter
        if (statusValue !== 'all' && signup.status !== statusValue) {
          return false;
        }
        
        // Session filter
        if (sessionValue !== 'all') {
          // Check if any child has the selected session
          const sessionIdNum = parseInt(sessionValue);
          const hasSelectedSession = signup.children && signup.children.some(child => 
            child.sessions && child.sessions.some(session => 
              session.id === sessionIdNum || session.id.toString() === sessionValue
            )
          );
          
          if (!hasSelectedSession) {
            return false;
          }
        }
        
        // Search filter
        if (searchValue) {
          // Parent name and email search
          const parentNameMatch = signup.parent && signup.parent.name && 
                                 signup.parent.name.toLowerCase().includes(searchValue);
          const parentEmailMatch = signup.parent && signup.parent.email && 
                                  signup.parent.email.toLowerCase().includes(searchValue);
          const parentPhoneMatch = signup.parent && signup.parent.phone && 
                                  signup.parent.phone.toLowerCase().includes(searchValue);
          
          // Children name search
          const childrenNameMatch = signup.children && signup.children.some(child => 
            child.name && child.name.toLowerCase().includes(searchValue)
          );
          
          return parentNameMatch || parentEmailMatch || parentPhoneMatch || childrenNameMatch;
        }
        
        return true;
      });
      
      // Display current page
      displayCurrentPage();
    };
    
    // Function to display current page of signups
    const displayCurrentPage = () => {
      // Calculate pagination values
      const totalItems = filteredSignups.length;
      const totalPages = Math.ceil(totalItems / itemsPerPage);
      
      // Ensure current page is valid
      if (currentPage < 1) currentPage = 1;
      if (currentPage > totalPages) currentPage = totalPages;
      
      // Calculate start and end indices
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = Math.min(startIndex + itemsPerPage, totalItems);
      
      // Update pagination UI
      currentPageSpan.textContent = currentPage;
      currentRangeSpan.textContent = totalItems > 0 ? `${startIndex + 1}-${endIndex}` : '0-0';
      totalCountSpan.textContent = totalItems;
      
      // Enable/disable pagination buttons
      prevPageBtn.disabled = currentPage <= 1;
      nextPageBtn.disabled = currentPage >= totalPages;
      
      // Clear the table body
      signupsTbody.innerHTML = '';
      
      // Check if no signups match the filter
      if (filteredSignups.length === 0) {
        signupsLoading.classList.add('hidden');
        signupsTable.classList.add('hidden');
        pagination.classList.add('hidden');
        noSignups.classList.remove('hidden');
        return;
      }
      
      // Get current page items
      const currentPageItems = filteredSignups.slice(startIndex, endIndex);
      
      // Display signups
      currentPageItems.forEach(signup => {
        const row = document.createElement('tr');
        row.classList.add('border-b', 'hover:bg-gray-50');
        
        // Format signup date
        const signupDate = formatDate(signup.created || signup.createdAt);
        
        // Format parent info
        const parentName = signup.parent ? signup.parent.name || 'N/A' : 'N/A';
        const parentEmail = signup.parent && signup.parent.email ? signup.parent.email : 'N/A';
        const parentPhone = signup.parent && signup.parent.phone ? signup.parent.phone : 'N/A';
        
        // Get unique session IDs and create badges
        const sessionIds = [...new Set(
          (signup.children || []).flatMap(child => 
            (child.sessions || []).map(session => session.id)
          )
        )].sort((a, b) => a - b);
        
        // Create session badges
        const sessionBadges = sessionIds.map(id => 
          `<span class="inline-block px-2 py-0.5 bg-blue-100 text-blue-800 rounded-full text-xs font-medium mr-1 mb-1">${id}</span>`
        ).join('');
        
        // Format payment info
        const paymentTotal = signup.paymentTotal ? `$${signup.paymentTotal.toFixed(2)}` : 'N/A';
        
        // Set status class
        const statusClass = getStatusClass(signup.status);
        
        row.innerHTML = `
          <td class="p-3 text-sm">${signupDate}</td>
          <td class="p-3">${parentName}</td>
          <td class="p-3">
            <div><a href="mailto:${parentEmail}" class="text-blue-600 hover:underline">${parentEmail}</a></div>
            <div><a href="tel:${parentPhone}" class="text-blue-600 hover:underline">${parentPhone}</a></div>
          </td>
          <td class="p-3">${signup.children && signup.children.length > 0 ? signup.children.map(child => child.name).join(', ') : 'No children'}</td>
          <td class="p-3">${sessionBadges}</td>
          <td class="p-3 text-center">${paymentTotal}</td>
          <td class="p-3 text-center">
            <span class="px-2 py-1 rounded-full text-xs font-medium ${statusClass}">
              ${signup.status || 'pending'}
            </span>
          </td>
          <td class="p-3 text-right">
            <button class="view-signup-btn px-3 py-1 text-blue-600 hover:underline" data-id="${signup.id}">
              View Details
            </button>
          </td>
        `;
        
        signupsTbody.appendChild(row);
      });
      
      // Add event listeners to view buttons
      document.querySelectorAll('.view-signup-btn').forEach(button => {
        button.addEventListener('click', () => {
          const signupId = button.getAttribute('data-id');
          viewSignup(signupId);
        });
      });
      
      // Show the table and pagination, hide loading
      signupsLoading.classList.add('hidden');
      signupsTable.classList.remove('hidden');
      pagination.classList.remove('hidden');
      noSignups.classList.add('hidden');
    };
    
    // Event handlers  
    if (searchInput) {
      // Debounce search input to avoid too many refreshes
      let searchTimeout;
      searchInput.addEventListener('input', () => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          filterSignups();
        }, 300);
      });
    }
    
    if (sessionFilter) {
      sessionFilter.addEventListener('change', filterSignups);
    }
    
    if (statusFilter) {
      statusFilter.addEventListener('change', filterSignups);
    }
    
    if (prevPageBtn) {
      prevPageBtn.addEventListener('click', () => {
        if (currentPage > 1) {
          currentPage--;
          displayCurrentPage();
        }
      });
    }
    
    if (nextPageBtn) {
      nextPageBtn.addEventListener('click', () => {
        const totalPages = Math.ceil(filteredSignups.length / itemsPerPage);
        if (currentPage < totalPages) {
          currentPage++;
          displayCurrentPage();
        }
      });
    }
    
    // Close modal buttons
    if (closeModalBtn) {
      closeModalBtn.addEventListener('click', closeModal);
    }
    
    if (closeBtn) {
      closeBtn.addEventListener('click', closeModal);
    }
    
    // Close modal when clicking outside
    if (signupModal) {
      signupModal.addEventListener('click', (e) => {
        if (e.target === signupModal) {
          closeModal();
        }
      });
    }
    
    // Update status button
    if (updateStatusBtn) {
      updateStatusBtn.addEventListener('click', updateSignupStatus);
    }
    
    // Save times button
    if (saveTimesBtn) {
      saveTimesBtn.addEventListener('click', async () => {
        try {
          // First try the regular approach
          await updateSessionTimes();
        } catch (error) {
          console.error('Regular update failed, trying direct updates:', error);
          
          // If it fails, collect all inputs and try direct updates
          const timeInputs = document.querySelectorAll('.session-time');
          let successCount = 0;
          
          // Process inputs one by one
          for (const input of timeInputs) {
            const childIndex = parseInt(input.getAttribute('data-child-index'));
            const sessionId = parseInt(input.getAttribute('data-session-id'));
            const newTime = input.value.trim();
            
            // Skip if no change
            if (!newTime) continue;
            
            // Try direct update
            const success = await directlyUpdateSessionTime(childIndex, sessionId, newTime);
            if (success) successCount++;
          }
          
          if (successCount > 0) {
            alert(`Updated ${successCount} session times successfully`);
            
            // Refresh the view
            const localIndex = allSignups.findIndex(s => s.id === currentSignupId);
            if (localIndex !== -1) {
              const signups = await signupsModule;
              const refreshedSignup = await signups.getSignup(currentSignupId);
              if (refreshedSignup) {
                allSignups[localIndex] = refreshedSignup;
                viewSignup(currentSignupId);
              }
            }
          } else {
            alert('Failed to update any session times. Please check the console for errors.');
          }
        }
      });
    }
    
    // Delete signup button
    if (deleteSignupBtn) {
      deleteSignupBtn.addEventListener('click', deleteSignup);
    }
    
    // Function to get status display class
    const getStatusClass = (status) => {
      switch (status) {
        case 'lessons scheduled':
          return 'bg-green-100 text-green-800';
        case 'completed':
          return 'bg-blue-100 text-blue-800';
        case 'cancelled':
          return 'bg-red-100 text-red-800';
        case 'pending':
          return 'bg-yellow-100 text-yellow-800';
        default:
          return 'bg-gray-100 text-gray-800';
      }
    };
    
    // Initial load - using a function to ensure consistent error handling
    const initializeSignups = async () => {
      try {
        await loadSessions();
        await loadSignups();
      } catch (error) {
        console.error('Error initializing signups page:', error);
        signupsError.textContent = `Error initializing page: ${error.message}`;
        signupsError.classList.remove('hidden');
        signupsLoading.classList.add('hidden');
      }
    };
    
    // Load data when document is ready
    document.addEventListener('DOMContentLoaded', initializeSignups);
    
    // Also load data when admin is authenticated
    document.addEventListener('admin-authenticated', initializeSignups);
  }
</script> 