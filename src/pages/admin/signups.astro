---
import AdminLayout from '../../layouts/AdminLayout.astro';
---

<AdminLayout title="Signup Management">
  <div class="mb-6">
    <p class="text-gray-700">
      Manage student signups and registrations. View, update, and manage enrollment details.
    </p>
  </div>
  
  <div id="signups-admin" class="p-6 bg-white rounded-lg shadow border border-gray-200">
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
      <h2 class="text-xl font-semibold">Signups</h2>
      
      <div class="flex flex-col sm:flex-row gap-3">
        <div>
          <label for="session-filter" class="block text-xs text-gray-600 mb-1">Filter by Session</label>
          <select id="session-filter" class="w-full sm:w-auto border rounded-md px-3 py-1.5 text-sm">
            <option value="all">All Sessions</option>
            <!-- Session options will be populated dynamically -->
          </select>
        </div>
        
        <div>
          <label for="status-filter" class="block text-xs text-gray-600 mb-1">Filter by Status</label>
          <select id="status-filter" class="w-full sm:w-auto border rounded-md px-3 py-1.5 text-sm">
            <option value="all">All Statuses</option>
            <option value="lessons scheduled">Scheduled</option>
            <option value="completed">Completed</option>
            <option value="cancelled">Cancelled</option>
            <option value="pending">Pending</option>
          </select>
        </div>
      </div>
    </div>
    
    <div id="signups-loading" class="text-center py-4">
      <p>Loading signups...</p>
    </div>
    
    <div id="signups-error" class="hidden bg-red-100 text-red-800 p-3 rounded mb-4">
      Could not load signups. Please check your Firebase configuration.
    </div>
    
    <div id="signups-table" class="hidden overflow-x-auto">
      <table class="min-w-full bg-white">
        <thead class="bg-gray-100 border-b">
          <tr>
            <th class="text-left p-3 w-24">Date</th>
            <th class="text-left p-3 w-48">Parent</th>
            <th class="text-left p-3">Contact</th>
            <th class="text-left p-3">Children</th>
            <th class="text-left p-3 w-32">Sessions</th>
            <th class="text-center p-3 w-24">Payment</th>
            <th class="text-center p-3 w-32">Status</th>
            <th class="text-right p-3 w-32">Actions</th>
          </tr>
        </thead>
        <tbody id="signups-tbody">
          <!-- Signups will be populated here -->
        </tbody>
      </table>
    </div>
    
    <div id="no-signups" class="hidden text-center py-8">
      <p class="text-gray-500">No signups found matching the current filters.</p>
    </div>
  </div>
  
  <!-- Signup Detail Modal -->
  <div id="signup-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
      <div class="flex justify-between items-center mb-4">
        <h3 id="modal-title" class="text-xl font-semibold">Signup Details</h3>
        <button id="close-modal-btn" class="text-gray-500 hover:text-gray-700">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <div id="signup-details">
        <!-- Signup details will be populated here -->
      </div>
      
      <div class="mt-6 border-t pt-4">
        <h4 class="font-medium mb-2">Update Status</h4>
        <div class="flex items-center space-x-2">
          <select id="status-select" class="border rounded-md px-3 py-1.5">
            <option value="lessons scheduled">Lessons Scheduled</option>
            <option value="completed">Completed</option>
            <option value="cancelled">Cancelled</option>
            <option value="pending">Pending</option>
          </select>
          <button id="update-status-btn" class="px-4 py-1.5 bg-blue-500 text-white rounded hover:bg-blue-600">
            Update Status
          </button>
        </div>
      </div>
      
      <div class="mt-4 flex justify-between">
        <button id="delete-signup-btn" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">
          Delete Signup
        </button>
        <button id="close-btn" class="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400">
          Close
        </button>
      </div>
      
      <div id="modal-error" class="mt-4 hidden bg-red-100 text-red-800 p-3 rounded"></div>
    </div>
  </div>
</AdminLayout>

<script>
  // Only execute this script if the signups admin component is present on the page
  if (document.getElementById('signups-admin')) {
    // Import the signups functions
    const signupsModule = import('../../lib/signups');
    const sessionsModule = import('../../lib/sessionManager');
    
    // Elements
    const signupsLoading = document.getElementById('signups-loading');
    const signupsError = document.getElementById('signups-error');
    const signupsTable = document.getElementById('signups-table');
    const signupsTbody = document.getElementById('signups-tbody');
    const noSignups = document.getElementById('no-signups');
    const sessionFilter = document.getElementById('session-filter');
    const statusFilter = document.getElementById('status-filter');
    
    // Modal elements
    const signupModal = document.getElementById('signup-modal');
    const modalTitle = document.getElementById('modal-title');
    const signupDetails = document.getElementById('signup-details');
    const statusSelect = document.getElementById('status-select');
    const updateStatusBtn = document.getElementById('update-status-btn');
    const deleteSignupBtn = document.getElementById('delete-signup-btn');
    const closeModalBtn = document.getElementById('close-modal-btn');
    const closeBtn = document.getElementById('close-btn');
    const modalError = document.getElementById('modal-error');
    
    // Current active signup ID
    let currentSignupId = null;
    let allSignups = [];
    let allSessions = [];
    
    // Function to show error in modal
    const showModalError = (message) => {
      modalError.textContent = message;
      modalError.classList.remove('hidden');
    };
    
    // Function to hide modal error
    const hideModalError = () => {
      modalError.textContent = '';
      modalError.classList.add('hidden');
    };
    
    // Function to format date from timestamp
    const formatDate = (timestamp) => {
      if (!timestamp) return 'N/A';
      
      const date = new Date(timestamp._seconds * 1000);
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });
    };
    
    // Function to open modal for viewing signup details
    const openSignupModal = async (id) => {
      hideModalError();
      currentSignupId = id;
      
      try {
        const { getSignup } = await signupsModule;
        const signup = await getSignup(id);
        
        if (!signup) {
          showModalError('Signup not found');
          return;
        }
        
        // Set status select value
        statusSelect.value = signup.status || 'lessons scheduled';
        
        // Set modal title
        modalTitle.textContent = `Signup: ${signup.parent.name}`;
        
        // Format created date
        const createdDate = formatDate(signup.created);
        
        // Build signup details HTML
        let detailsHTML = `
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 class="font-medium mb-2">Parent Information</h4>
              <div class="border rounded p-3">
                <p><strong>Name:</strong> ${signup.parent.name}</p>
                <p><strong>Email:</strong> <a href="mailto:${signup.parent.email}" class="text-blue-600 hover:underline">${signup.parent.email}</a></p>
                <p><strong>Phone:</strong> <a href="tel:${signup.parent.phone}" class="text-blue-600 hover:underline">${signup.parent.phone}</a></p>
                <p><strong>Date:</strong> ${createdDate}</p>
              </div>
            </div>
            
            <div>
              <h4 class="font-medium mb-2">Payment Information</h4>
              <div class="border rounded p-3">
                <p><strong>Amount:</strong> $${signup.paymentTotal.toFixed(2)}</p>
                <p><strong>Status:</strong> <span class="px-2 py-0.5 rounded ${getStatusClass(signup.status)}">${signup.status || 'Unknown'}</span></p>
                <p><strong>Stripe Customer:</strong> ${signup.stripeCustomerId}</p>
              </div>
            </div>
          </div>
          
          ${signup.request ? `
            <div class="mt-4">
              <h4 class="font-medium mb-2">Special Requests</h4>
              <div class="border rounded p-3 bg-gray-50">
                <p>${signup.request.replace(/\n/g, '<br>')}</p>
              </div>
            </div>
          ` : ''}
          
          <div class="mt-4">
            <h4 class="font-medium mb-2">Children</h4>
            <div class="border rounded">
              ${signup.children.map((child, index) => `
                <div class="p-3 ${index !== 0 ? 'border-t' : ''}">
                  <div class="flex justify-between">
                    <p class="font-medium">${child.name}</p>
                    <p class="text-sm">DOB: ${child.birthday}</p>
                  </div>
                  <p class="text-sm mb-2">Level: ${child.level}</p>
                  
                  <div class="mt-2">
                    <p class="text-sm font-medium">Sessions:</p>
                    ${child.sessions.map(session => `
                      <div class="ml-2 p-2 mb-1 bg-blue-50 rounded text-sm">
                        <div><strong>${session.text}</strong></div>
                        <div>Time: ${session.time}</div>
                      </div>
                    `).join('')}
                  </div>
                </div>
              `).join('')}
            </div>
          </div>
        `;
        
        signupDetails.innerHTML = detailsHTML;
        signupModal.classList.remove('hidden');
      } catch (error) {
        console.error('Error opening signup modal:', error);
        showModalError(error.message || 'Error loading signup details');
      }
    };
    
    // Function to get status display class
    const getStatusClass = (status) => {
      switch (status) {
        case 'lessons scheduled':
          return 'bg-green-100 text-green-800';
        case 'completed':
          return 'bg-blue-100 text-blue-800';
        case 'cancelled':
          return 'bg-red-100 text-red-800';
        case 'pending':
          return 'bg-yellow-100 text-yellow-800';
        default:
          return 'bg-gray-100 text-gray-800';
      }
    };
    
    // Function to close modal
    const closeModal = () => {
      signupModal.classList.add('hidden');
      currentSignupId = null;
    };
    
    // Function to load sessions for filter
    const loadSessions = async () => {
      try {
        const { getAllSessions } = await sessionsModule;
        allSessions = await getAllSessions();
        
        // Clear options
        sessionFilter.innerHTML = '<option value="all">All Sessions</option>';
        
        // Sort sessions by ID
        allSessions.sort((a, b) => parseInt(a.id) - parseInt(b.id));
        
        // Add session options
        allSessions.forEach(session => {
          const option = document.createElement('option');
          option.value = session.id;
          option.textContent = `Session ${session.id}: ${session.dates}`;
          sessionFilter.appendChild(option);
        });
      } catch (error) {
        console.error('Error loading sessions:', error);
      }
    };
    
    // Function to load and display signups
    const loadSignups = async () => {
      try {
        signupsLoading.classList.remove('hidden');
        signupsTable.classList.add('hidden');
        noSignups.classList.add('hidden');
        signupsError.classList.add('hidden');
        
        const { getAllSignups } = await signupsModule;
        allSignups = await getAllSignups();
        
        filterAndDisplaySignups();
      } catch (error) {
        console.error('Error loading signups:', error);
        signupsLoading.classList.add('hidden');
        signupsError.textContent = error.message || 'Error loading signups. Please check your Firebase configuration.';
        signupsError.classList.remove('hidden');
      }
    };
    
    // Function to filter and display signups
    const filterAndDisplaySignups = () => {
      const sessionId = sessionFilter.value;
      const status = statusFilter.value;
      
      // Filter signups
      let filteredSignups = [...allSignups];
      
      if (sessionId !== 'all') {
        const sessionIdNum = parseInt(sessionId);
        filteredSignups = filteredSignups.filter(signup => {
          return signup.children.some(child => 
            child.sessions.some(session => session.id === sessionIdNum)
          );
        });
      }
      
      if (status !== 'all') {
        filteredSignups = filteredSignups.filter(signup => signup.status === status);
      }
      
      // Clear existing signups
      signupsTbody.innerHTML = '';
      
      // Check if there are any signups to display
      if (filteredSignups.length === 0) {
        signupsLoading.classList.add('hidden');
        signupsTable.classList.add('hidden');
        noSignups.classList.remove('hidden');
        return;
      }
      
      // Add signups to table
      filteredSignups.forEach(signup => {
        const row = document.createElement('tr');
        row.classList.add('border-b', 'hover:bg-gray-50');
        
        // Format date
        const createdDate = formatDate(signup.created);
        
        // Get child names as comma-separated list
        const childrenNames = signup.children.map(child => child.name).join(', ');
        
        // Get unique session IDs
        const sessionIds = [...new Set(
          signup.children.flatMap(child => 
            child.sessions.map(session => session.id)
          )
        )].sort((a, b) => a - b);
        
        // Create session badges
        const sessionBadges = sessionIds.map(id => 
          `<span class="inline-block px-2 py-0.5 bg-blue-100 text-blue-800 rounded-full text-xs font-medium mr-1 mb-1">${id}</span>`
        ).join('');
        
        row.innerHTML = `
          <td class="p-3 text-sm">${createdDate}</td>
          <td class="p-3">${signup.parent.name}</td>
          <td class="p-3 text-sm">
            <div><a href="mailto:${signup.parent.email}" class="text-blue-600 hover:underline">${signup.parent.email}</a></div>
            <div><a href="tel:${signup.parent.phone}" class="text-blue-600 hover:underline">${signup.parent.phone}</a></div>
          </td>
          <td class="p-3">${childrenNames}</td>
          <td class="p-3">${sessionBadges}</td>
          <td class="p-3 text-center">$${signup.paymentTotal.toFixed(2)}</td>
          <td class="p-3 text-center">
            <span class="px-2 py-1 rounded-full text-xs font-medium ${getStatusClass(signup.status)}">
              ${signup.status || 'Unknown'}
            </span>
          </td>
          <td class="p-3 text-right">
            <button class="view-signup-btn px-3 py-1 text-blue-600 hover:underline" data-id="${signup.id}">
              View Details
            </button>
          </td>
        `;
        
        signupsTbody.appendChild(row);
      });
      
      // Add event listeners to view buttons
      document.querySelectorAll('.view-signup-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const id = btn.getAttribute('data-id');
          openSignupModal(id);
        });
      });
      
      // Show table
      signupsLoading.classList.add('hidden');
      signupsTable.classList.remove('hidden');
    };
    
    // Update signup status
    updateStatusBtn.addEventListener('click', async () => {
      if (!currentSignupId) return;
      
      try {
        hideModalError();
        const newStatus = statusSelect.value;
        
        const { updateSignupStatus } = await signupsModule;
        await updateSignupStatus(currentSignupId, newStatus);
        
        // Update the status in the allSignups array
        const signupIndex = allSignups.findIndex(s => s.id === currentSignupId);
        if (signupIndex !== -1) {
          allSignups[signupIndex].status = newStatus;
        }
        
        // Close modal and reload the table
        closeModal();
        filterAndDisplaySignups();
      } catch (error) {
        console.error('Error updating status:', error);
        showModalError(error.message || 'Error updating signup status');
      }
    });
    
    // Delete signup button
    deleteSignupBtn.addEventListener('click', async () => {
      if (!currentSignupId) return;
      
      if (confirm(`Are you sure you want to delete this signup? This action cannot be undone.`)) {
        try {
          const { deleteSignup } = await signupsModule;
          await deleteSignup(currentSignupId);
          
          // Remove the signup from the allSignups array
          allSignups = allSignups.filter(s => s.id !== currentSignupId);
          
          closeModal();
          filterAndDisplaySignups();
        } catch (error) {
          console.error('Error deleting signup:', error);
          showModalError(error.message || 'Error deleting signup');
        }
      }
    });
    
    // Filter change handlers
    sessionFilter.addEventListener('change', filterAndDisplaySignups);
    statusFilter.addEventListener('change', filterAndDisplaySignups);
    
    // Close modal buttons
    closeModalBtn.addEventListener('click', closeModal);
    closeBtn.addEventListener('click', closeModal);
    
    // Close modal when clicking outside
    signupModal.addEventListener('click', (e) => {
      if (e.target === signupModal) {
        closeModal();
      }
    });
    
    // Load sessions and signups when the page loads
    document.addEventListener('DOMContentLoaded', () => {
      loadSessions();
      loadSignups();
    });
    
    // Also load data when admin is authenticated
    document.addEventListener('admin-authenticated', () => {
      loadSessions();
      loadSignups();
    });
  }
</script> 